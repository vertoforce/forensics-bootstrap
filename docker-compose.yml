version: '3.5'

services:

  # Frontend load balancer
  traefik:
    image: traefik # The official Traefik docker image
    command: --api --docker # Enables the web UI and tells Traefik to listen to docker
    ports:
      - "80:80"   # The HTTP port
      - "443:443"   # The HTTPS port
      - "8080:8080" # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/${TRAEFIK_CONFIG:-traefik_dev.toml}:/traefik.toml
      - ./traefik/acme.json:/acme.json
    networks:
      - master


  # Tool to automate running of scans for openvas, etc
  # https://www.seccubus.com/
  seccubus:
    image: seccubus/seccubus
    ports:
      - 80:80
      - 443:443
    networks:
      - master
  
  # Zed attack proxy usable in web browser
  # https://github.com/zaproxy/zaproxy/wiki/WebSwing
  zap:
    image: owasp/zap2docker-stable
    ports:
      - 8080:8080
      - 8090:8090
    command: zap-webswing.sh
    networks:
      - master

  # The Docker Bench for Security is a script that checks for dozens of common best-practices around deploying Docker containers in production
  # https://github.com/docker/docker-bench-security
  docker-bench-security:
    # use image if you have a dedicated build step:
    #   docker build --rm -t docker-bench-security .
    image: docker/docker-bench-security
    # use build path to Dockerfile if docker-compose should build the image
    # build: .
    cap_add:
        - audit_control
    labels:
        - docker_bench_security
    # net: host
    # pid: host
    stdin_open: true
    tty: true
    volumes:
        - /var/lib:/var/lib
        - /var/run/docker.sock:/var/run/docker.sock
        # - /usr/lib/systemd:/usr/lib/systemd
        # - /etc:/etc
    networks:
      - master
    

  # Cilium
  # Layer 7 firewall and network rules (like blocking POST /protected-endpoint from a certain container)
  # https://cilium.io/

  # https://www.projectcalico.org/

  # TODO: Alienvault

  # EveBox
  # Web frontend to manage events generateed by Suricata
  evebox:
    image: jasonish/evebox
    ports:
      - 5636
    networks:
      - master
    command: -e http://elasticsearch:9200
    labels:
      - "traefik.backend=evebox"
      - "traefik.docker.network=${network_name:-masternetwork}"
      - "traefik.frontend.rule=Host:evebox.${BASE_URL:-localhost}" # add another rule with ";Host:host"
      - "traefik.enable=true"
      - "traefik.port=5636"


  # Suricata service
  # IDS similar to snort.
  suricata:
    image: "dtagdevsec/suricata:1811"
    restart: always
    environment:
    # For ET Pro ruleset replace "OPEN" with your OINKCODE
     - OINKCODE=OPEN
    network_mode: "host"
    cap_add:
     - NET_ADMIN
     - SYS_NICE
     - NET_RAW
    volumes:
     - ./suricata-log:/var/log/suricata

  chrome:
    image: alpeware/chrome-headless-trunk
    ports:
      - 9222:9222

  portainer:
    image: portainer/portainer
    ports:
      - 9000
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer-data:/data
    networks:
      - master
    labels:
      - "traefik.backend=portainer"
      - "traefik.docker.network=${network_name:-masternetwork}"
      - "traefik.frontend.rule=Host:portainer.${BASE_URL:-localhost}" # add another rule with ";Host:host"
      - "traefik.enable=true"
      - "traefik.port=9000"

  # -- ELK --
  elasticsearch:
    image: library/elasticsearch:6.5.0
    volumes:
      # for persistent data
      - ./elasticsearch-data:/usr/share/elasticsearch/data
      - ./elk_config/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - 9200:9200
      - 9300
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - master
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 1G

  logstash:
    image: library/logstash:6.5.0
    volumes:
      - ./suricata-log:/var/log/suricata # To get and parse suricata-logs
      - ./elk_config/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elk_config/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - 5000/udp
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - master
    depends_on:
      - elasticsearch
    deploy:
      restart_policy:
        condition: on-failure

  logspout:
    image: bekt/logspout-logstash
    environment:
      ROUTE_URIS: 'logstash://logstash:5000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - logstash
      - elasticsearch
    deploy:
      restart_policy:
        condition: any
        delay: 10s
    networks:
      - master
    restart: on-failure

  kibana:
    image: library/kibana:6.5.0
    volumes:
      - ./elk_config/kibana/config/:/usr/share/kibana/config:ro
    ports:
      - 5601
    networks:
      - master
    depends_on:
      - elasticsearch
    deploy:
      restart_policy:
        condition: on-failure
    labels:
      - "traefik.backend=kibana"
      - "traefik.docker.network=${network_name:-masternetwork}"
      - "traefik.frontend.rule=Host:kibana.${BASE_URL:-localhost}" # add another rule with ";Host:host"
      - "traefik.enable=true"
      - "traefik.port=5601"


networks:
    # Network mostly needed for swarm
    # Set to bridge to test locally and have ports be outside accessible
    master:
        name: "${network_name:-masternetwork}"
        driver: overlay